name: Update Homebrew Formula

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to update formula for (e.g., 0.1.3)'
        required: true
        default: '0.1.3'

jobs:
  update-homebrew-formula:
    name: Update Homebrew Formula
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            # For release events, extract from tag
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          fi

      - name: Download macOS artifacts (if they exist)
        id: download
        continue-on-error: true
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          mkdir -p dist
          
          echo "üîç Attempting to download macOS binaries for v$VERSION..."
          
          # Try to download the release artifacts
          base="https://github.com/${{ github.repository }}/releases/download/v$VERSION"
          
          if curl -fLso dist/intel.tar.gz "$base/kurpod-v$VERSION-darwin-intel.tar.gz"; then
            echo "‚úÖ Downloaded Intel macOS binary"
          else
            echo "‚ùå Intel macOS binary not found - this is expected for manual testing"
            echo "download_success=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          if curl -fLso dist/arm.tar.gz "$base/kurpod-v$VERSION-darwin-apple-silicon.tar.gz"; then
            echo "‚úÖ Downloaded Apple Silicon macOS binary"
            echo "download_success=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Apple Silicon macOS binary not found - this is expected for manual testing"
            echo "download_success=false" >> $GITHUB_OUTPUT
          fi

      - name: Calculate checksums or use placeholders
        id: checksums
        run: |
          if [ "${{ steps.download.outputs.download_success }}" = "true" ]; then
            echo "üìä Calculating real checksums..."
            intel_sha=$(sha256sum dist/intel.tar.gz | cut -d' ' -f1)
            arm_sha=$(sha256sum dist/arm.tar.gz | cut -d' ' -f1)
            echo "intel_sha=$intel_sha" >> $GITHUB_OUTPUT
            echo "arm_sha=$arm_sha" >> $GITHUB_OUTPUT
            echo "using_real_checksums=true" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è  Using placeholder checksums (for testing)"
            echo "intel_sha=INTEL_SHA256_PLACEHOLDER" >> $GITHUB_OUTPUT
            echo "arm_sha=ARM_SHA256_PLACEHOLDER" >> $GITHUB_OUTPUT
            echo "using_real_checksums=false" >> $GITHUB_OUTPUT
          fi

      - name: Update formula
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          INTEL_SHA="${{ steps.checksums.outputs.intel_sha }}"
          ARM_SHA="${{ steps.checksums.outputs.arm_sha }}"
          
          echo "üîß Updating Formula/kurpod.rb..."
          echo "   Version: $VERSION"
          echo "   Intel SHA: $INTEL_SHA"
          echo "   ARM SHA: $ARM_SHA"
          
          # Update the formula
          sed -i "s/version \".*\"/version \"$VERSION\"/" Formula/kurpod.rb
          sed -i "s/INTEL_SHA256_PLACEHOLDER/$INTEL_SHA/" Formula/kurpod.rb
          sed -i "s/ARM_SHA256_PLACEHOLDER/$ARM_SHA/" Formula/kurpod.rb
          
          echo "‚úÖ Formula updated"

      - name: Show changes
        run: |
          echo "üìã Changes made to Formula/kurpod.rb:"
          git diff Formula/kurpod.rb || echo "No changes detected"

      - name: Commit updated formula
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          USING_REAL="${{ steps.checksums.outputs.using_real_checksums }}"
          
          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check if there are changes to commit
          git add Formula/kurpod.rb
          if git diff --staged --quiet; then
            echo "‚ÑπÔ∏è  No changes to commit"
          else
            if [ "$USING_REAL" = "true" ]; then
              git commit -m "homebrew: bump formula to v$VERSION"
              git push origin main
              echo "‚úÖ Committed and pushed changes to main branch"
            else
              echo "‚ö†Ô∏è  Would commit (dry run - using placeholder checksums):"
              git diff --staged
              echo ""
              echo "üí° To actually commit, re-run with a version that has published releases"
            fi
          fi

      - name: Summary
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          USING_REAL="${{ steps.checksums.outputs.using_real_checksums }}"
          
          if [ "$USING_REAL" = "true" ]; then
            cat << EOF
          ## üç∫ Homebrew Formula Updated Successfully
          
          **Version**: v$VERSION  
          **Status**: ‚úÖ Real checksums calculated and committed
          
          **Users can now install/upgrade with:**
          \`\`\`bash
          brew tap srv1n/kurpod https://github.com/srv1n/kurpod.git
          brew install kurpod
          # or: brew upgrade kurpod
          \`\`\`
          EOF
          else
            cat << EOF
          ## üß™ Homebrew Formula Test Run
          
          **Version**: v$VERSION  
          **Status**: ‚ö†Ô∏è Test run with placeholder checksums (no commit made)
          
          **To complete the update:**
          1. Ensure v$VERSION has published macOS release assets
          2. Re-run this workflow or wait for the next release
          EOF
          fi